Funcom programming test: Boid simulation

The provided framework is a simple application which simulates basic flocking behaviour of a bunch of entities (boids).
The simulation is written in an extremely basic and naive way. 
The point of the test is for you to improve the boid simulation code to perform better while keeping in mind memory usage.

The parts of the code that are most relevant to this test are (as well as the parts of the codebase that these call into):
viewer\src\sG\sg_boidMng.cpp/h
viewer\src\sG\sg_boid.cpp/h
viewer\src\sG\sg_gameMng.cpp

the game manager initializes the boid manager, and triggers the simulation steps for the system every frame (_boidMng->stepSimulation();), as well as the settings of the render data for the boids (_boidMng->syncWindowStep();).
The simulation and render data setting stages are separate, due to the rendering code running on a different thread than the game code.

these defines in sg_gameMng.cpp determine the number of boids:
#define NUM_SMALL_BOIDS 900
#define NUM_BIG_BOIDS 4

The program is extremely slow in the state provided, so you might need to run in release to see anything other than a slideshow.
You are free to use any approaches you want to address performance, from refactoring to SIMD to threading using the GPU to anything else. (If you are applying for a gameplay programming position though, please choose a CPU based approach)

You will need to have win10, a dx11 complient gpu, as well as visual studio 2022 to run the test (available free online). (older version of vs should work if you change the make_build_genie script)

Run the make_build_genie.bat script to generate the projects and solution. They will be generated in the build folder.

If you have any issues, please contact fredr@funcom.com. Please to not share the test framework or use it for other reasons than this test.

